// Generated by view binder compiler. Do not edit!
package dev.lucasnlm.antimine.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.textview.MaterialTextView;
import dev.lucasnlm.antimine.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final MaterialButton about;

  @NonNull
  public final MaterialTextView beginnerSize;

  @NonNull
  public final MaterialButton continueGame;

  @NonNull
  public final MaterialButton controls;

  @NonNull
  public final MaterialCardView difficulties;

  @NonNull
  public final View difficultyDivider1;

  @NonNull
  public final View difficultyDivider2;

  @NonNull
  public final MaterialTextView expertSize;

  @NonNull
  public final MaterialTextView fixedSizeSize;

  @NonNull
  public final MaterialCardView historyCard;

  @NonNull
  public final MaterialTextView intermediateSize;

  @NonNull
  public final MaterialButton language;

  @NonNull
  public final MaterialTextView legendSize;

  @NonNull
  public final MaterialTextView masterSize;

  @NonNull
  public final MaterialCardView newGameCard;

  @NonNull
  public final MaterialButton newGameShow;

  @NonNull
  public final AppCompatImageView newThemesIcon;

  @NonNull
  public final MaterialCardView otherCard;

  @NonNull
  public final MaterialButton playGames;

  @NonNull
  public final MaterialButton previousGames;

  @NonNull
  public final AppCompatImageView priceOff;

  @NonNull
  public final MaterialTextView priceText;

  @NonNull
  public final MaterialButton removeAds;

  @NonNull
  public final FrameLayout removeAdsRoot;

  @NonNull
  public final MaterialButton settings;

  @NonNull
  public final MaterialCardView settingsCard;

  @NonNull
  public final MaterialTextView standardSize;

  @NonNull
  public final MaterialButton startBeginner;

  @NonNull
  public final MaterialButton startCustom;

  @NonNull
  public final MaterialButton startExpert;

  @NonNull
  public final MaterialButton startFixedSize;

  @NonNull
  public final MaterialButton startIntermediate;

  @NonNull
  public final MaterialButton startLegend;

  @NonNull
  public final MaterialButton startMaster;

  @NonNull
  public final MaterialButton startStandard;

  @NonNull
  public final MaterialButton stats;

  @NonNull
  public final MaterialButton themes;

  @NonNull
  public final MaterialButton tutorial;

  private ActivityMainBinding(@NonNull ConstraintLayout rootView, @NonNull MaterialButton about,
      @NonNull MaterialTextView beginnerSize, @NonNull MaterialButton continueGame,
      @NonNull MaterialButton controls, @NonNull MaterialCardView difficulties,
      @NonNull View difficultyDivider1, @NonNull View difficultyDivider2,
      @NonNull MaterialTextView expertSize, @NonNull MaterialTextView fixedSizeSize,
      @NonNull MaterialCardView historyCard, @NonNull MaterialTextView intermediateSize,
      @NonNull MaterialButton language, @NonNull MaterialTextView legendSize,
      @NonNull MaterialTextView masterSize, @NonNull MaterialCardView newGameCard,
      @NonNull MaterialButton newGameShow, @NonNull AppCompatImageView newThemesIcon,
      @NonNull MaterialCardView otherCard, @NonNull MaterialButton playGames,
      @NonNull MaterialButton previousGames, @NonNull AppCompatImageView priceOff,
      @NonNull MaterialTextView priceText, @NonNull MaterialButton removeAds,
      @NonNull FrameLayout removeAdsRoot, @NonNull MaterialButton settings,
      @NonNull MaterialCardView settingsCard, @NonNull MaterialTextView standardSize,
      @NonNull MaterialButton startBeginner, @NonNull MaterialButton startCustom,
      @NonNull MaterialButton startExpert, @NonNull MaterialButton startFixedSize,
      @NonNull MaterialButton startIntermediate, @NonNull MaterialButton startLegend,
      @NonNull MaterialButton startMaster, @NonNull MaterialButton startStandard,
      @NonNull MaterialButton stats, @NonNull MaterialButton themes,
      @NonNull MaterialButton tutorial) {
    this.rootView = rootView;
    this.about = about;
    this.beginnerSize = beginnerSize;
    this.continueGame = continueGame;
    this.controls = controls;
    this.difficulties = difficulties;
    this.difficultyDivider1 = difficultyDivider1;
    this.difficultyDivider2 = difficultyDivider2;
    this.expertSize = expertSize;
    this.fixedSizeSize = fixedSizeSize;
    this.historyCard = historyCard;
    this.intermediateSize = intermediateSize;
    this.language = language;
    this.legendSize = legendSize;
    this.masterSize = masterSize;
    this.newGameCard = newGameCard;
    this.newGameShow = newGameShow;
    this.newThemesIcon = newThemesIcon;
    this.otherCard = otherCard;
    this.playGames = playGames;
    this.previousGames = previousGames;
    this.priceOff = priceOff;
    this.priceText = priceText;
    this.removeAds = removeAds;
    this.removeAdsRoot = removeAdsRoot;
    this.settings = settings;
    this.settingsCard = settingsCard;
    this.standardSize = standardSize;
    this.startBeginner = startBeginner;
    this.startCustom = startCustom;
    this.startExpert = startExpert;
    this.startFixedSize = startFixedSize;
    this.startIntermediate = startIntermediate;
    this.startLegend = startLegend;
    this.startMaster = startMaster;
    this.startStandard = startStandard;
    this.stats = stats;
    this.themes = themes;
    this.tutorial = tutorial;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.about;
      MaterialButton about = ViewBindings.findChildViewById(rootView, id);
      if (about == null) {
        break missingId;
      }

      id = R.id.beginnerSize;
      MaterialTextView beginnerSize = ViewBindings.findChildViewById(rootView, id);
      if (beginnerSize == null) {
        break missingId;
      }

      id = R.id.continueGame;
      MaterialButton continueGame = ViewBindings.findChildViewById(rootView, id);
      if (continueGame == null) {
        break missingId;
      }

      id = R.id.controls;
      MaterialButton controls = ViewBindings.findChildViewById(rootView, id);
      if (controls == null) {
        break missingId;
      }

      id = R.id.difficulties;
      MaterialCardView difficulties = ViewBindings.findChildViewById(rootView, id);
      if (difficulties == null) {
        break missingId;
      }

      id = R.id.difficultyDivider1;
      View difficultyDivider1 = ViewBindings.findChildViewById(rootView, id);
      if (difficultyDivider1 == null) {
        break missingId;
      }

      id = R.id.difficultyDivider2;
      View difficultyDivider2 = ViewBindings.findChildViewById(rootView, id);
      if (difficultyDivider2 == null) {
        break missingId;
      }

      id = R.id.expertSize;
      MaterialTextView expertSize = ViewBindings.findChildViewById(rootView, id);
      if (expertSize == null) {
        break missingId;
      }

      id = R.id.fixedSizeSize;
      MaterialTextView fixedSizeSize = ViewBindings.findChildViewById(rootView, id);
      if (fixedSizeSize == null) {
        break missingId;
      }

      id = R.id.history_card;
      MaterialCardView historyCard = ViewBindings.findChildViewById(rootView, id);
      if (historyCard == null) {
        break missingId;
      }

      id = R.id.intermediateSize;
      MaterialTextView intermediateSize = ViewBindings.findChildViewById(rootView, id);
      if (intermediateSize == null) {
        break missingId;
      }

      id = R.id.language;
      MaterialButton language = ViewBindings.findChildViewById(rootView, id);
      if (language == null) {
        break missingId;
      }

      id = R.id.legendSize;
      MaterialTextView legendSize = ViewBindings.findChildViewById(rootView, id);
      if (legendSize == null) {
        break missingId;
      }

      id = R.id.masterSize;
      MaterialTextView masterSize = ViewBindings.findChildViewById(rootView, id);
      if (masterSize == null) {
        break missingId;
      }

      id = R.id.new_game_card;
      MaterialCardView newGameCard = ViewBindings.findChildViewById(rootView, id);
      if (newGameCard == null) {
        break missingId;
      }

      id = R.id.newGameShow;
      MaterialButton newGameShow = ViewBindings.findChildViewById(rootView, id);
      if (newGameShow == null) {
        break missingId;
      }

      id = R.id.newThemesIcon;
      AppCompatImageView newThemesIcon = ViewBindings.findChildViewById(rootView, id);
      if (newThemesIcon == null) {
        break missingId;
      }

      id = R.id.other_card;
      MaterialCardView otherCard = ViewBindings.findChildViewById(rootView, id);
      if (otherCard == null) {
        break missingId;
      }

      id = R.id.play_games;
      MaterialButton playGames = ViewBindings.findChildViewById(rootView, id);
      if (playGames == null) {
        break missingId;
      }

      id = R.id.previousGames;
      MaterialButton previousGames = ViewBindings.findChildViewById(rootView, id);
      if (previousGames == null) {
        break missingId;
      }

      id = R.id.priceOff;
      AppCompatImageView priceOff = ViewBindings.findChildViewById(rootView, id);
      if (priceOff == null) {
        break missingId;
      }

      id = R.id.priceText;
      MaterialTextView priceText = ViewBindings.findChildViewById(rootView, id);
      if (priceText == null) {
        break missingId;
      }

      id = R.id.removeAds;
      MaterialButton removeAds = ViewBindings.findChildViewById(rootView, id);
      if (removeAds == null) {
        break missingId;
      }

      id = R.id.removeAdsRoot;
      FrameLayout removeAdsRoot = ViewBindings.findChildViewById(rootView, id);
      if (removeAdsRoot == null) {
        break missingId;
      }

      id = R.id.settings;
      MaterialButton settings = ViewBindings.findChildViewById(rootView, id);
      if (settings == null) {
        break missingId;
      }

      id = R.id.settings_card;
      MaterialCardView settingsCard = ViewBindings.findChildViewById(rootView, id);
      if (settingsCard == null) {
        break missingId;
      }

      id = R.id.standardSize;
      MaterialTextView standardSize = ViewBindings.findChildViewById(rootView, id);
      if (standardSize == null) {
        break missingId;
      }

      id = R.id.startBeginner;
      MaterialButton startBeginner = ViewBindings.findChildViewById(rootView, id);
      if (startBeginner == null) {
        break missingId;
      }

      id = R.id.startCustom;
      MaterialButton startCustom = ViewBindings.findChildViewById(rootView, id);
      if (startCustom == null) {
        break missingId;
      }

      id = R.id.startExpert;
      MaterialButton startExpert = ViewBindings.findChildViewById(rootView, id);
      if (startExpert == null) {
        break missingId;
      }

      id = R.id.startFixedSize;
      MaterialButton startFixedSize = ViewBindings.findChildViewById(rootView, id);
      if (startFixedSize == null) {
        break missingId;
      }

      id = R.id.startIntermediate;
      MaterialButton startIntermediate = ViewBindings.findChildViewById(rootView, id);
      if (startIntermediate == null) {
        break missingId;
      }

      id = R.id.startLegend;
      MaterialButton startLegend = ViewBindings.findChildViewById(rootView, id);
      if (startLegend == null) {
        break missingId;
      }

      id = R.id.startMaster;
      MaterialButton startMaster = ViewBindings.findChildViewById(rootView, id);
      if (startMaster == null) {
        break missingId;
      }

      id = R.id.startStandard;
      MaterialButton startStandard = ViewBindings.findChildViewById(rootView, id);
      if (startStandard == null) {
        break missingId;
      }

      id = R.id.stats;
      MaterialButton stats = ViewBindings.findChildViewById(rootView, id);
      if (stats == null) {
        break missingId;
      }

      id = R.id.themes;
      MaterialButton themes = ViewBindings.findChildViewById(rootView, id);
      if (themes == null) {
        break missingId;
      }

      id = R.id.tutorial;
      MaterialButton tutorial = ViewBindings.findChildViewById(rootView, id);
      if (tutorial == null) {
        break missingId;
      }

      return new ActivityMainBinding((ConstraintLayout) rootView, about, beginnerSize, continueGame,
          controls, difficulties, difficultyDivider1, difficultyDivider2, expertSize, fixedSizeSize,
          historyCard, intermediateSize, language, legendSize, masterSize, newGameCard, newGameShow,
          newThemesIcon, otherCard, playGames, previousGames, priceOff, priceText, removeAds,
          removeAdsRoot, settings, settingsCard, standardSize, startBeginner, startCustom,
          startExpert, startFixedSize, startIntermediate, startLegend, startMaster, startStandard,
          stats, themes, tutorial);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
