// Generated by view binder compiler. Do not edit!
package dev.lucasnlm.antimine.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.textfield.TextInputEditText;
import dev.lucasnlm.antimine.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DialogCustomGameBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final LinearLayout areaLayout;

  @NonNull
  public final TextInputEditText mapHeight;

  @NonNull
  public final TextInputEditText mapMines;

  @NonNull
  public final TextInputEditText mapWidth;

  @NonNull
  public final LinearLayout minesLayout;

  @NonNull
  public final TextInputEditText seed;

  private DialogCustomGameBinding(@NonNull ConstraintLayout rootView,
      @NonNull LinearLayout areaLayout, @NonNull TextInputEditText mapHeight,
      @NonNull TextInputEditText mapMines, @NonNull TextInputEditText mapWidth,
      @NonNull LinearLayout minesLayout, @NonNull TextInputEditText seed) {
    this.rootView = rootView;
    this.areaLayout = areaLayout;
    this.mapHeight = mapHeight;
    this.mapMines = mapMines;
    this.mapWidth = mapWidth;
    this.minesLayout = minesLayout;
    this.seed = seed;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogCustomGameBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogCustomGameBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_custom_game, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogCustomGameBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.areaLayout;
      LinearLayout areaLayout = ViewBindings.findChildViewById(rootView, id);
      if (areaLayout == null) {
        break missingId;
      }

      id = R.id.map_height;
      TextInputEditText mapHeight = ViewBindings.findChildViewById(rootView, id);
      if (mapHeight == null) {
        break missingId;
      }

      id = R.id.map_mines;
      TextInputEditText mapMines = ViewBindings.findChildViewById(rootView, id);
      if (mapMines == null) {
        break missingId;
      }

      id = R.id.map_width;
      TextInputEditText mapWidth = ViewBindings.findChildViewById(rootView, id);
      if (mapWidth == null) {
        break missingId;
      }

      id = R.id.minesLayout;
      LinearLayout minesLayout = ViewBindings.findChildViewById(rootView, id);
      if (minesLayout == null) {
        break missingId;
      }

      id = R.id.seed;
      TextInputEditText seed = ViewBindings.findChildViewById(rootView, id);
      if (seed == null) {
        break missingId;
      }

      return new DialogCustomGameBinding((ConstraintLayout) rootView, areaLayout, mapHeight,
          mapMines, mapWidth, minesLayout, seed);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
