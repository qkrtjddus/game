// Generated by view binder compiler. Do not edit!
package dev.lucasnlm.antimine.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.appbar.AppBarLayout;
import com.google.android.material.progressindicator.CircularProgressIndicator;
import com.google.android.material.progressindicator.LinearProgressIndicator;
import com.google.android.material.textview.MaterialTextView;
import dev.lucasnlm.antimine.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import nl.dionsegijn.konfetti.xml.KonfettiView;

public final class ActivityGameBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final AppBarLayout appBar;

  @NonNull
  public final AppCompatImageView back;

  @NonNull
  public final MaterialTextView controlsToast;

  @NonNull
  public final CircularProgressIndicator hintCooldown;

  @NonNull
  public final MaterialTextView hintCounter;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final KonfettiView konfettiView;

  @NonNull
  public final FrameLayout levelContainer;

  @NonNull
  public final LinearProgressIndicator loadingGame;

  @NonNull
  public final MaterialTextView minesCount;

  @NonNull
  public final AppCompatImageView shortcutIcon;

  @NonNull
  public final MaterialTextView tapToBegin;

  @NonNull
  public final MaterialTextView timer;

  private ActivityGameBinding(@NonNull ConstraintLayout rootView, @NonNull AppBarLayout appBar,
      @NonNull AppCompatImageView back, @NonNull MaterialTextView controlsToast,
      @NonNull CircularProgressIndicator hintCooldown, @NonNull MaterialTextView hintCounter,
      @Nullable KonfettiView konfettiView, @NonNull FrameLayout levelContainer,
      @NonNull LinearProgressIndicator loadingGame, @NonNull MaterialTextView minesCount,
      @NonNull AppCompatImageView shortcutIcon, @NonNull MaterialTextView tapToBegin,
      @NonNull MaterialTextView timer) {
    this.rootView = rootView;
    this.appBar = appBar;
    this.back = back;
    this.controlsToast = controlsToast;
    this.hintCooldown = hintCooldown;
    this.hintCounter = hintCounter;
    this.konfettiView = konfettiView;
    this.levelContainer = levelContainer;
    this.loadingGame = loadingGame;
    this.minesCount = minesCount;
    this.shortcutIcon = shortcutIcon;
    this.tapToBegin = tapToBegin;
    this.timer = timer;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityGameBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityGameBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_game, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityGameBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.app_bar;
      AppBarLayout appBar = ViewBindings.findChildViewById(rootView, id);
      if (appBar == null) {
        break missingId;
      }

      id = R.id.back;
      AppCompatImageView back = ViewBindings.findChildViewById(rootView, id);
      if (back == null) {
        break missingId;
      }

      id = R.id.controlsToast;
      MaterialTextView controlsToast = ViewBindings.findChildViewById(rootView, id);
      if (controlsToast == null) {
        break missingId;
      }

      id = R.id.hintCooldown;
      CircularProgressIndicator hintCooldown = ViewBindings.findChildViewById(rootView, id);
      if (hintCooldown == null) {
        break missingId;
      }

      id = R.id.hintCounter;
      MaterialTextView hintCounter = ViewBindings.findChildViewById(rootView, id);
      if (hintCounter == null) {
        break missingId;
      }

      id = R.id.konfettiView;
      KonfettiView konfettiView = ViewBindings.findChildViewById(rootView, id);

      id = R.id.levelContainer;
      FrameLayout levelContainer = ViewBindings.findChildViewById(rootView, id);
      if (levelContainer == null) {
        break missingId;
      }

      id = R.id.loadingGame;
      LinearProgressIndicator loadingGame = ViewBindings.findChildViewById(rootView, id);
      if (loadingGame == null) {
        break missingId;
      }

      id = R.id.minesCount;
      MaterialTextView minesCount = ViewBindings.findChildViewById(rootView, id);
      if (minesCount == null) {
        break missingId;
      }

      id = R.id.shortcutIcon;
      AppCompatImageView shortcutIcon = ViewBindings.findChildViewById(rootView, id);
      if (shortcutIcon == null) {
        break missingId;
      }

      id = R.id.tapToBegin;
      MaterialTextView tapToBegin = ViewBindings.findChildViewById(rootView, id);
      if (tapToBegin == null) {
        break missingId;
      }

      id = R.id.timer;
      MaterialTextView timer = ViewBindings.findChildViewById(rootView, id);
      if (timer == null) {
        break missingId;
      }

      return new ActivityGameBinding((ConstraintLayout) rootView, appBar, back, controlsToast,
          hintCooldown, hintCounter, konfettiView, levelContainer, loadingGame, minesCount,
          shortcutIcon, tapToBegin, timer);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
