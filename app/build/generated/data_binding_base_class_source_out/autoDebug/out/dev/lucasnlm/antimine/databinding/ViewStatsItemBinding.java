// Generated by view binder compiler. Do not edit!
package dev.lucasnlm.antimine.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TableLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.textview.MaterialTextView;
import dev.lucasnlm.antimine.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ViewStatsItemBinding implements ViewBinding {
  @NonNull
  private final MaterialCardView rootView;

  @NonNull
  public final MaterialTextView averageTime;

  @NonNull
  public final MaterialCardView card;

  @NonNull
  public final MaterialTextView defeat;

  @NonNull
  public final MaterialTextView minesCount;

  @NonNull
  public final MaterialTextView openAreas;

  @NonNull
  public final MaterialTextView performance;

  @NonNull
  public final MaterialTextView shortestTime;

  @NonNull
  public final TableLayout stats;

  @NonNull
  public final MaterialTextView statsLabel;

  @NonNull
  public final MaterialTextView totalGames;

  @NonNull
  public final MaterialTextView totalTime;

  @NonNull
  public final MaterialTextView victory;

  private ViewStatsItemBinding(@NonNull MaterialCardView rootView,
      @NonNull MaterialTextView averageTime, @NonNull MaterialCardView card,
      @NonNull MaterialTextView defeat, @NonNull MaterialTextView minesCount,
      @NonNull MaterialTextView openAreas, @NonNull MaterialTextView performance,
      @NonNull MaterialTextView shortestTime, @NonNull TableLayout stats,
      @NonNull MaterialTextView statsLabel, @NonNull MaterialTextView totalGames,
      @NonNull MaterialTextView totalTime, @NonNull MaterialTextView victory) {
    this.rootView = rootView;
    this.averageTime = averageTime;
    this.card = card;
    this.defeat = defeat;
    this.minesCount = minesCount;
    this.openAreas = openAreas;
    this.performance = performance;
    this.shortestTime = shortestTime;
    this.stats = stats;
    this.statsLabel = statsLabel;
    this.totalGames = totalGames;
    this.totalTime = totalTime;
    this.victory = victory;
  }

  @Override
  @NonNull
  public MaterialCardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ViewStatsItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ViewStatsItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.view_stats_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ViewStatsItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.averageTime;
      MaterialTextView averageTime = ViewBindings.findChildViewById(rootView, id);
      if (averageTime == null) {
        break missingId;
      }

      MaterialCardView card = (MaterialCardView) rootView;

      id = R.id.defeat;
      MaterialTextView defeat = ViewBindings.findChildViewById(rootView, id);
      if (defeat == null) {
        break missingId;
      }

      id = R.id.minesCount;
      MaterialTextView minesCount = ViewBindings.findChildViewById(rootView, id);
      if (minesCount == null) {
        break missingId;
      }

      id = R.id.openAreas;
      MaterialTextView openAreas = ViewBindings.findChildViewById(rootView, id);
      if (openAreas == null) {
        break missingId;
      }

      id = R.id.performance;
      MaterialTextView performance = ViewBindings.findChildViewById(rootView, id);
      if (performance == null) {
        break missingId;
      }

      id = R.id.shortestTime;
      MaterialTextView shortestTime = ViewBindings.findChildViewById(rootView, id);
      if (shortestTime == null) {
        break missingId;
      }

      id = R.id.stats;
      TableLayout stats = ViewBindings.findChildViewById(rootView, id);
      if (stats == null) {
        break missingId;
      }

      id = R.id.statsLabel;
      MaterialTextView statsLabel = ViewBindings.findChildViewById(rootView, id);
      if (statsLabel == null) {
        break missingId;
      }

      id = R.id.totalGames;
      MaterialTextView totalGames = ViewBindings.findChildViewById(rootView, id);
      if (totalGames == null) {
        break missingId;
      }

      id = R.id.totalTime;
      MaterialTextView totalTime = ViewBindings.findChildViewById(rootView, id);
      if (totalTime == null) {
        break missingId;
      }

      id = R.id.victory;
      MaterialTextView victory = ViewBindings.findChildViewById(rootView, id);
      if (victory == null) {
        break missingId;
      }

      return new ViewStatsItemBinding((MaterialCardView) rootView, averageTime, card, defeat,
          minesCount, openAreas, performance, shortestTime, stats, statsLabel, totalGames,
          totalTime, victory);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
