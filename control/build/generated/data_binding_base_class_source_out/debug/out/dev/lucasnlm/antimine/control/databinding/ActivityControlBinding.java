// Generated by view binder compiler. Do not edit!
package dev.lucasnlm.antimine.control.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Space;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.slider.Slider;
import com.google.android.material.textview.MaterialTextView;
import dev.lucasnlm.antimine.control.R;
import dev.lucasnlm.antimine.control.SwitchButtonView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityControlBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final MaterialCardView controlDefault;

  @NonNull
  public final MaterialTextView controlDefaultTitle;

  @NonNull
  public final MaterialCardView controlSettings;

  @NonNull
  public final MaterialCardView controlStyles;

  @NonNull
  public final Slider doubleClick;

  @NonNull
  public final MaterialTextView doubleClickLabel;

  @NonNull
  public final Slider hapticLevel;

  @NonNull
  public final MaterialTextView hapticLevelLabel;

  @NonNull
  public final Slider longPress;

  @NonNull
  public final MaterialTextView longPressLabel;

  @NonNull
  public final RecyclerView recyclerView;

  @NonNull
  public final MaterialTextView settingsLabel;

  @NonNull
  public final Space space;

  @NonNull
  public final Space space2;

  @NonNull
  public final MaterialTextView statsLabel;

  @NonNull
  public final SwitchButtonView switchButtonView;

  @NonNull
  public final MaterialToolbar toolbar;

  @NonNull
  public final Slider touchSensibility;

  @NonNull
  public final MaterialTextView touchSensibilityLabel;

  private ActivityControlBinding(@NonNull ConstraintLayout rootView,
      @NonNull MaterialCardView controlDefault, @NonNull MaterialTextView controlDefaultTitle,
      @NonNull MaterialCardView controlSettings, @NonNull MaterialCardView controlStyles,
      @NonNull Slider doubleClick, @NonNull MaterialTextView doubleClickLabel,
      @NonNull Slider hapticLevel, @NonNull MaterialTextView hapticLevelLabel,
      @NonNull Slider longPress, @NonNull MaterialTextView longPressLabel,
      @NonNull RecyclerView recyclerView, @NonNull MaterialTextView settingsLabel,
      @NonNull Space space, @NonNull Space space2, @NonNull MaterialTextView statsLabel,
      @NonNull SwitchButtonView switchButtonView, @NonNull MaterialToolbar toolbar,
      @NonNull Slider touchSensibility, @NonNull MaterialTextView touchSensibilityLabel) {
    this.rootView = rootView;
    this.controlDefault = controlDefault;
    this.controlDefaultTitle = controlDefaultTitle;
    this.controlSettings = controlSettings;
    this.controlStyles = controlStyles;
    this.doubleClick = doubleClick;
    this.doubleClickLabel = doubleClickLabel;
    this.hapticLevel = hapticLevel;
    this.hapticLevelLabel = hapticLevelLabel;
    this.longPress = longPress;
    this.longPressLabel = longPressLabel;
    this.recyclerView = recyclerView;
    this.settingsLabel = settingsLabel;
    this.space = space;
    this.space2 = space2;
    this.statsLabel = statsLabel;
    this.switchButtonView = switchButtonView;
    this.toolbar = toolbar;
    this.touchSensibility = touchSensibility;
    this.touchSensibilityLabel = touchSensibilityLabel;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityControlBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityControlBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_control, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityControlBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.control_default;
      MaterialCardView controlDefault = ViewBindings.findChildViewById(rootView, id);
      if (controlDefault == null) {
        break missingId;
      }

      id = R.id.control_default_title;
      MaterialTextView controlDefaultTitle = ViewBindings.findChildViewById(rootView, id);
      if (controlDefaultTitle == null) {
        break missingId;
      }

      id = R.id.control_settings;
      MaterialCardView controlSettings = ViewBindings.findChildViewById(rootView, id);
      if (controlSettings == null) {
        break missingId;
      }

      id = R.id.control_styles;
      MaterialCardView controlStyles = ViewBindings.findChildViewById(rootView, id);
      if (controlStyles == null) {
        break missingId;
      }

      id = R.id.doubleClick;
      Slider doubleClick = ViewBindings.findChildViewById(rootView, id);
      if (doubleClick == null) {
        break missingId;
      }

      id = R.id.doubleClickLabel;
      MaterialTextView doubleClickLabel = ViewBindings.findChildViewById(rootView, id);
      if (doubleClickLabel == null) {
        break missingId;
      }

      id = R.id.hapticLevel;
      Slider hapticLevel = ViewBindings.findChildViewById(rootView, id);
      if (hapticLevel == null) {
        break missingId;
      }

      id = R.id.hapticLevelLabel;
      MaterialTextView hapticLevelLabel = ViewBindings.findChildViewById(rootView, id);
      if (hapticLevelLabel == null) {
        break missingId;
      }

      id = R.id.longPress;
      Slider longPress = ViewBindings.findChildViewById(rootView, id);
      if (longPress == null) {
        break missingId;
      }

      id = R.id.longPressLabel;
      MaterialTextView longPressLabel = ViewBindings.findChildViewById(rootView, id);
      if (longPressLabel == null) {
        break missingId;
      }

      id = R.id.recyclerView;
      RecyclerView recyclerView = ViewBindings.findChildViewById(rootView, id);
      if (recyclerView == null) {
        break missingId;
      }

      id = R.id.settingsLabel;
      MaterialTextView settingsLabel = ViewBindings.findChildViewById(rootView, id);
      if (settingsLabel == null) {
        break missingId;
      }

      id = R.id.space;
      Space space = ViewBindings.findChildViewById(rootView, id);
      if (space == null) {
        break missingId;
      }

      id = R.id.space2;
      Space space2 = ViewBindings.findChildViewById(rootView, id);
      if (space2 == null) {
        break missingId;
      }

      id = R.id.statsLabel;
      MaterialTextView statsLabel = ViewBindings.findChildViewById(rootView, id);
      if (statsLabel == null) {
        break missingId;
      }

      id = R.id.switch_button_view;
      SwitchButtonView switchButtonView = ViewBindings.findChildViewById(rootView, id);
      if (switchButtonView == null) {
        break missingId;
      }

      id = R.id.toolbar;
      MaterialToolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      id = R.id.touchSensibility;
      Slider touchSensibility = ViewBindings.findChildViewById(rootView, id);
      if (touchSensibility == null) {
        break missingId;
      }

      id = R.id.touchSensibilityLabel;
      MaterialTextView touchSensibilityLabel = ViewBindings.findChildViewById(rootView, id);
      if (touchSensibilityLabel == null) {
        break missingId;
      }

      return new ActivityControlBinding((ConstraintLayout) rootView, controlDefault,
          controlDefaultTitle, controlSettings, controlStyles, doubleClick, doubleClickLabel,
          hapticLevel, hapticLevelLabel, longPress, longPressLabel, recyclerView, settingsLabel,
          space, space2, statsLabel, switchButtonView, toolbar, touchSensibility,
          touchSensibilityLabel);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
